@page "/password/new"
@page "/password/edit/{Id:guid}"
@using PasswordManager.Core.Models
@using PasswordManager.Web.Client.Models
@using Microsoft.JSInterop
@inject PasswordService PasswordService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@rendermode InteractiveWebAssembly

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h2>@(Id == null ? "Add New Password" : "Edit Password")</h2>

            <EditForm Model="@model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText id="title" @bind-Value="model.Title" class="form-control" />
                    <ValidationMessage For="@(() => model.Title)" />
                </div>

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="() => model.Username" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <InputText type="@(showPassword ? "text" : "password")" 
                                 id="password" @bind-Value="model.Password" 
                                 class="form-control" />
                        <button type="button" class="btn btn-outline-secondary" 
                                @onclick="TogglePasswordVisibility">
                            @(showPassword ? "Hide" : "Show")
                        </button>
                        <button type="button" class="btn btn-outline-secondary" 
                                @onclick="() => showPasswordOptions = !showPasswordOptions">
                            Options
                        </button>
                        <button type="button" class="btn btn-outline-secondary" 
                                @onclick="GeneratePassword">
                            Generate
                        </button>
                    </div>
                    <ValidationMessage For="@(() => model.Password)" />

                    @if (showPasswordOptions)
                    {
                        <div class="card mt-2">
                            <div class="card-body">
                                <h6 class="card-title">Password Generation Options</h6>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="passwordLength" class="form-label">Length</label>
                                        <InputNumber id="passwordLength" class="form-control" 
                                                   @bind-Value="generateRequest.Length" min="8" max="128" />
                                    </div>
                                    <div class="col-12">
                                        <div class="form-check">
                                            <InputCheckbox id="uppercase" class="form-check-input" 
                                                         @bind-Value="generateRequest.IncludeUppercase" />
                                            <label class="form-check-label" for="uppercase">
                                                Include Uppercase Letters (A-Z)
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-check">
                                            <InputCheckbox id="lowercase" class="form-check-input" 
                                                         @bind-Value="generateRequest.IncludeLowercase" />
                                            <label class="form-check-label" for="lowercase">
                                                Include Lowercase Letters (a-z)
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-check">
                                            <InputCheckbox id="numbers" class="form-check-input" 
                                                         @bind-Value="generateRequest.IncludeNumbers" />
                                            <label class="form-check-label" for="numbers">
                                                Include Numbers (0-9)
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-check">
                                            <InputCheckbox id="special" class="form-check-input" 
                                                         @bind-Value="generateRequest.IncludeSpecialChars" />
                                            <label class="form-check-label" for="special">
                                                Include Special Characters
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <label for="exclude" class="form-label">Exclude Characters</label>
                                        <InputText id="exclude" class="form-control" 
                                                 @bind-Value="generateRequest.ExcludeCharacters" 
                                                 placeholder="Characters to exclude (e.g., 0O1l)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="mb-3">
                    <label for="website" class="form-label">Website</label>
                    <InputText id="website" @bind-Value="model.Website" class="form-control" />
                    <ValidationMessage For="@(() => model.Website)" />
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <InputText id="category" @bind-Value="model.Category" class="form-control" />
                    <ValidationMessage For="@(() => model.Category)" />
                </div>

                <div class="mb-3">
                    <label for="notes" class="form-label">Notes</label>
                    <InputTextArea id="notes" @bind-Value="model.Notes" class="form-control" rows="3" />
                    <ValidationMessage For="@(() => model.Notes)" />
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private PasswordManager.Core.Models.CreatePasswordRequest model = new();
    private bool showPassword = false;
    private bool showPasswordOptions = false;
    private GeneratePasswordRequest generateRequest = new()
    {
        Length = 16,
        IncludeUppercase = true,
        IncludeLowercase = true,
        IncludeNumbers = true,
        IncludeSpecialChars = true,
        ExcludeCharacters = ""
    };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var password = await PasswordService.GetPassword(Id.Value);
            if (password != null)
            {
                model = new PasswordManager.Core.Models.CreatePasswordRequest
                {
                    Title = password.Title,
                    Username = password.Username,
                    Website = password.Website,
                    Category = password.Category,
                    Notes = password.Notes
                };
            }
        }
    }

    private async Task HandleSubmit()
    {
        bool success;
        if (Id.HasValue)
        {
            var updateRequest = new PasswordManager.Core.Models.UpdatePasswordRequest
            {
                Title = model.Title,
                Username = model.Username,
                Password = model.Password,
                Website = model.Website,
                Category = model.Category,
                Notes = model.Notes
            };
            success = await PasswordService.UpdatePassword(Id.Value, updateRequest);
        }
        else
        {
            success = await PasswordService.CreatePassword(model);
        }

        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task GeneratePassword()
    {
        if (!generateRequest.IncludeUppercase && 
            !generateRequest.IncludeLowercase && 
            !generateRequest.IncludeNumbers && 
            !generateRequest.IncludeSpecialChars)
        {
            await JS.InvokeVoidAsync("alert", "Please select at least one character type.");
            return;
        }

        if (generateRequest.Length < 8)
        {
            await JS.InvokeVoidAsync("alert", "Password length must be at least 8 characters.");
            return;
        }

        var generatedPassword = await PasswordService.GeneratePassword(generateRequest);
        if (!string.IsNullOrEmpty(generatedPassword))
        {
            model.Password = generatedPassword;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
} 