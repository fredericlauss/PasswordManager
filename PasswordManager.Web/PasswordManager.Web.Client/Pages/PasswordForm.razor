@page "/password/new"
@page "/password/edit/{Id:guid}"
@using PasswordManager.Core.Models
@inject PasswordService PasswordService
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h2>@(Id == null ? "Add New Password" : "Edit Password")</h2>

            <EditForm Model="@model" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText id="title" @bind-Value="model.Title" class="form-control" />
                    <ValidationMessage For="@(() => model.Title)" />
                </div>

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <InputText type="@(showPassword ? "text" : "password")" 
                                 id="password" @bind-Value="model.Password" 
                                 class="form-control" />
                        <button type="button" class="btn btn-outline-secondary" 
                                @onclick="TogglePasswordVisibility">
                            <i class="fas fa-@(showPassword ? "eye-slash" : "eye")"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary" 
                                @onclick="GeneratePassword">
                            Generate
                        </button>
                    </div>
                    <ValidationMessage For="@(() => model.Password)" />
                </div>

                <div class="mb-3">
                    <label for="website" class="form-label">Website</label>
                    <InputText id="website" @bind-Value="model.Website" class="form-control" />
                    <ValidationMessage For="@(() => model.Website)" />
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <InputText id="category" @bind-Value="model.Category" class="form-control" />
                    <ValidationMessage For="@(() => model.Category)" />
                </div>

                <div class="mb-3">
                    <label for="notes" class="form-label">Notes</label>
                    <InputTextArea id="notes" @bind-Value="model.Notes" class="form-control" rows="3" />
                    <ValidationMessage For="@(() => model.Notes)" />
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private PasswordManager.Core.Models.CreatePasswordRequest model = new();
    private bool showPassword = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var password = await PasswordService.GetPassword(Id.Value);
            if (password != null)
            {
                model = new PasswordManager.Core.Models.CreatePasswordRequest
                {
                    Title = password.Title,
                    Username = password.Username,
                    Website = password.Website,
                    Category = password.Category,
                    Notes = password.Notes
                };
            }
        }
    }

    private async Task HandleSubmit()
    {
        bool success;
        if (Id.HasValue)
        {
            var updateRequest = new PasswordManager.Core.Models.UpdatePasswordRequest
            {
                Title = model.Title,
                Username = model.Username,
                Password = model.Password,
                Website = model.Website,
                Category = model.Category,
                Notes = model.Notes
            };
            success = await PasswordService.UpdatePassword(Id.Value, updateRequest);
        }
        else
        {
            success = await PasswordService.CreatePassword(model);
        }

        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    
    private bool showPasswordOptions = false;
    private GeneratePasswordRequest generateRequest = new();

    private async Task GeneratePassword()
    {
        var generatedPassword = await PasswordService.GeneratePassword(generateRequest);
        if (!string.IsNullOrEmpty(generatedPassword))
        {
            model.Password = generatedPassword;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
} 