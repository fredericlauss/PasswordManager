@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<PageTitle>Login</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h1>Login</h1>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Email:</label>
                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group">
                    <label for="password">Password:</label>
                    <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <button type="submit" class="btn btn-primary">Login</button>
            </EditForm>

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3">
                    @error
                </div>
            }
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private string error = string.Empty;
    [Parameter] [SupplyParameterFromQuery] public string? ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        error = string.Empty;
        var result = await AuthService.Login(loginModel);
        
        if (result)
        {
            var returnUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            error = "Login failed. Please check your credentials.";
        }
    }
}