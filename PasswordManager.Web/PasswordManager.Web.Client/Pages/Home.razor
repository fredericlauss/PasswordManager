@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.Components.Authorization
@using PasswordManager.Core.Models;
@inject PasswordService PasswordService

<PageTitle>PasswordManager</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>PasswordManager</h1>
        <p>Welcome to your PasswordManager, @context.User.Identity?.Name!</p>

        @if (_passwords == null)
        {
            <p>Loading...</p>
        }
        else if (!_passwords.Any())
        {
            <p>No passwords found. Start by adding one!</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Username</th>
                            <th>Website</th>
                            <th>Category</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var password in _passwords)
                        {
                            <tr>
                                <td>@password.Title</td>
                                <td>@password.Username</td>
                                <td>@password.Website</td>
                                <td>@password.Category</td>
                                <td>
                                    <button class="btn btn-sm btn-primary">Edit</button>
                                    <button class="btn btn-sm btn-danger">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>Please log in to access the password manager.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<StoredPassword>? _passwords;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _passwords = await PasswordService.GetPasswords();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            _passwords = new List<StoredPassword>();
        }
    }
}