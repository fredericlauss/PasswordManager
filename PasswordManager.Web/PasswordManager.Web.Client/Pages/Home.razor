@page "/"
@using PasswordManager.Core.Models
@inject IAuthService AuthService
@inject PasswordService PasswordService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly

<PageTitle>Password Manager</PageTitle>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!isAuthenticated)
{
    <div class="text-center">
        <h1>Welcome to Password Manager</h1>
        <p>Please log in to access your passwords.</p>
        <button class="btn btn-primary" @onclick="NavigateToLogin">Login</button>
    </div>
}
else
{
    <div class="container">
        <div class="row mb-3">
            <div class="col">
                <h1>My Passwords</h1>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="NavigateToNewPassword">
                    <i class="fas fa-plus"></i> Add Password
                </button>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Search..." 
                       @bind-value="searchTerm" @bind-value:event="oninput" 
                       @onkeyup="HandleSearch" />
            </div>
        </div>

        @if (!passwords.Any())
        {
            <div class="alert alert-info">
                No passwords found.
            </div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-md-3 g-4">
                @foreach (var password in passwords)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <div class="card-header bg-light">
                                <h5 class="card-title mb-0">@password.Title</h5>
                                <small class="text-muted">@password.Category</small>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <div class="d-flex align-items-center mb-2">
                                        <strong>Username</strong>
                                    </div>
                                    <div class="input-group">
                                        <input type="text" class="form-control" value="@password.Username" readonly />
                                        <button class="btn btn-outline-secondary" @onclick="() => CopyToClipboard(password.Username)">
                                            Copy
                                        </button>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="d-flex align-items-center mb-2">
                                        <strong>Password</strong>
                                    </div>
                                    <div class="input-group">
                                        <input type="@(visiblePasswords.Contains(password.Id) ? "text" : "password")" 
                                               class="form-control" 
                                               value="@password.EncryptedPassword" 
                                               readonly />
                                        <button class="btn btn-outline-secondary" @onclick="() => TogglePasswordVisibility(password.Id)">
                                            @(visiblePasswords.Contains(password.Id) ? "Hide" : "Show")
                                        </button>
                                        <button class="btn btn-outline-secondary" @onclick="() => CopyToClipboard(password.EncryptedPassword)">
                                            Copy
                                        </button>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="d-flex align-items-center mb-2">
                                        <strong>Website</strong>
                                    </div>
                                    <a href="@password.Website" target="_blank" class="text-decoration-none">
                                        @password.Website
                                    </a>
                                </div>

                                <div class="d-flex justify-content-end gap-2">
                                    <button class="btn btn-primary btn-sm" @onclick="() => NavigateToEdit(password.Id)">
                                        Edit
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePassword(password.Id)">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private List<StoredPassword> passwords = new();
    private string searchTerm = "";
    private HashSet<Guid> visiblePasswords = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await AuthService.GetToken();
            isAuthenticated = !string.IsNullOrEmpty(token);
            
            if (isAuthenticated)
            {
                await LoadPasswords();
            }
            
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPasswords()
    {
        Console.WriteLine("Loading passwords..."); // Debug
        passwords = await PasswordService.GetPasswords();
        Console.WriteLine($"Loaded {passwords.Count} passwords"); // Debug
    }

    private async Task HandleSearch()
    {
        Console.WriteLine($"Searching for: {searchTerm}"); // Debug
        if (!string.IsNullOrEmpty(searchTerm))
        {
            passwords = await PasswordService.SearchPasswords(searchTerm);
        }
        else
        {
            await LoadPasswords();
        }
        Console.WriteLine($"Found {passwords.Count} passwords"); // Debug
        StateHasChanged();
    }

    private async Task DeletePassword(Guid id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this password?"))
        {
            await PasswordService.DeletePassword(id);
            await LoadPasswords();
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("login");
    }

    private void NavigateToNewPassword()
    {
        NavigationManager.NavigateTo("password/new");
    }

    private void NavigateToEdit(Guid id)
    {
        NavigationManager.NavigateTo($"password/edit/{id}");
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private void TogglePasswordVisibility(Guid passwordId)
    {
        if (visiblePasswords.Contains(passwordId))
        {
            visiblePasswords.Remove(passwordId);
        }
        else
        {
            visiblePasswords.Add(passwordId);
        }
    }
}